{
    "Parameters": {
        "Package": {
            "Type": "string",
            "Description": "The path to the Web Deploy package to deploy.",
            "DefaultValue": ""
        },
        "LicenseFile": {
            "Type": "string",
            "Description": "The path to the Sitecore license file.",
            "DefaultValue": ".\\License.xml"
        },
        "SqlDbPrefix": {
            "Type": "string",
            "Description": "The prefix used for all Sql databases.",
            "DefaultValue": ""
        },
        "SolrCorePrefix": {
            "Type": "string",
            "Description": "The prefix used for all Solr cores.",
            "DefaultValue": ""
        },
		"SSLCert": {
            "Type": "string",
            "Description": "The certificate to use for HTTPS web bindings. Provide the name or the thumbprint. If not provided a certificate will be generated.",
            "DefaultValue": ""
        },
        "XConnectCert": {
            "Type": "string",
            "Description": "The certificate to use for encryption. Provide the name or the thumbprint.",
            "DefaultValue": ""
        },
        "SiteName": {
            "Type": "string",
            "DefaultValue": "SitecoreCD",
            "Description": "The name of the site to be deployed."
        },
        "SitePhysicalRoot": {
            "Type": "String",
            "Description": "Root folder to install the site to. If left on the default [systemdrive]:\\inetpub\\wwwroot will be used.",
            "DefaultValue": ""
        },
        "SqlSecurityUser": {
            "Type": "string",
            "DefaultValue": "securityuser",
            "Description": "The Sql user for the Security connection string in Sitecore."
        },
        "SqlSecurityPassword": {
            "Type": "string",
            "DefaultValue": "SIF-Default",
            "Description": "The Sql password for the Security connection string in Sitecore."
        },
        "SqlWebUser": {
            "Type": "string",
            "DefaultValue": "webuser",
            "Description": "The Sql user for the Web connection string in Sitecore."
        },
        "SqlWebPassword": {
            "Type": "string",
            "DefaultValue": "SIF-Default",
            "Description": "The Sql password for the Web connection string in Sitecore."
        },
        "SqlFormsUser": {
            "Type": "string",
            "DefaultValue": "formsuser",
            "Description": "The Sql user for the Experience Forms connection string in Sitecore."
        },
        "SqlFormsPassword": {
            "Type": "string",
            "DefaultValue": "SIF-Default",
            "Description": "The Sql password for the Experience Forms connection string in Sitecore."
        },
        "SqlExmMasterUser": {
            "Type": "string",
            "DefaultValue": "exmmasteruser",
            "Description": "The Sql user for the EXM Master connection string in Sitecore."
        },
        "SqlExmMasterPassword": {
            "Type": "string",
            "DefaultValue": "SIF-Default",
            "Description": "The Sql password for the EXM Master connection string in Sitecore."
        },
        "SqlMessagingUser": {
          "Type": "string",
          "DefaultValue": "messaginguser",
          "Description": "The Sql user for the Messaging connection string in Sitecore."
        },
        "SqlMessagingPassword": {
            "Type": "string",
            "DefaultValue": "SIF-Default",
            "Description": "The Sql password for the Messaging connection string in Sitecore."
        },
        "SqlServer": {
            "Type": "string",
            "DefaultValue": ".\\SQLSERVER",
            "Description": "The Sql Server where databases will be installed."
        },
        "SolrUrl": {
            "Type": "string",
            "DefaultValue": "https://localhost:8983/solr",
            "Description": "The Solr instance to use."
        },
        "XConnectCollectionService": {
            "Type": "string",
            "DefaultValue": "https://XConnectCollection",
            "Description": "The url for the XConnect Collection Service."
        },
        "XConnectReferenceDataService": {
            "Type": "string",
            "DefaultValue": "https://XConnectReferenceData",
            "Description": "The url for the XConnect Collection Search Service."
        },
        "MarketingAutomationOperationsService": {
            "Type": "string",
            "DefaultValue": "https://XConnectMarketingAutomation",
            "Description": "The url for the XConnect Marketing Automation Service."
        },
        "MarketingAutomationReportingService": {
            "Type": "string",
            "DefaultValue": "https://XConnectMarketingAutomationReporting",
            "Description": "The url for the XConnect Marketing Automation Reporting Service."
        },
        "SitecoreIdentityAuthority": {
            "Type": "string",
            "DefaultValue": "https://SitecoreIdentityServerHost",
            "Description": "IdentityServer provider URI."
        },
        "EXMCryptographicKey": {
            "Type": "string",
            "DefaultValue": "0x0123456789012345678901234567890123456789012345678901234678901234",
            "Description": "64 digits hexadecimal EXM Cryptographic Key. Takes the form 0x0000000000000000000000000000000000000000000000000000000000000000"
        },
        "EXMAuthenticationKey": {
            "Type": "string",
            "DefaultValue": "0x0123456789012345678901234567890123456789012345678901234678901234",
            "Description": "64 digits hexadecimal EXM Authentication Key. Takes the form 0x0000000000000000000000000000000000000000000000000000000000000000"
        },
        "HostMappingName": {
            "Type": "string",
            "Reference": "SiteName",
            "Description": "The host mapping name of the site."
        },
        "DnsName" :{
            "Type": "string",
            "Reference": "SiteName",
            "Description": "The dns name of the site."
        },
        "PackagesTempLocation": {
            "Type": "String",
            "Description": "Alternative location to save WDP packages. If left on the default $Env:Temp will be used.",
            "DefaultValue": "",
            "Validate": "[TestPath(variable('Temp.Location'))]"
        },
        "DownloadLocations": {
            "Type": "String",
            "Description": "File with URI and SHA256 hashes of dynamically downloadable WDPs.",
            "DefaultValue": ".\\downloads.json"
        }
    },
    "Register": {
        "Tasks": {
            "RemoveItem": "Remove-Item"
        },
        "ConfigFunction": {
            "TestPath": "Test-Path",
            "SelectObject": "Select-Object",
            "SplitPath": "Split-Path",
            "GetVariable": "Get-Variable"
        }
    },
    "Variables": {

        "Sql.Database.Security":   "[concat(parameter('SqlDbPrefix'), '_Core')]",
        "Sql.Database.Web":        "[concat(parameter('SqlDbPrefix'), '_Web')]",
        "Sql.Database.Forms":      "[concat(parameter('SqlDbPrefix'), '_ExperienceForms')]",
        "Sql.Database.EXM.Master": "[concat(parameter('SqlDbPrefix'), '_EXM.Master')]",
        "Sql.Database.Messaging":  "[concat(parameter('SqlDbPrefix'), '_Messaging')]",

        "SqlMessaging.Password": "[parameter('SqlMessagingPassword')]",
        "SqlExmMaster.Password": "[parameter('SqlExmMasterPassword')]",
        "SqlForms.Password": "[parameter('SqlFormsPassword')]",
        "SqlCore.Password": "[parameter('SqlCorePassword')]",
        "SqlSecurity.Password": "[parameter('SqlSecurityPassword')]",
        "SqlWeb.Password": "[parameter('SqlWebPassword')]",

        "EXM.CryptographicKey" : "[parameter('EXMCryptographicKey'))]",
        "EXM.AuthenticationKey" : "[parameter('EXMAuthenticationKey'))]",

        "Security.CertificateStore": "Cert:\\Localmachine\\My",
        "Security.XConnect.CertificateThumbprint": "[GetCertificateThumbprint(parameter('XConnectCert'), variable('Security.CertificateStore'))]",
        "Security.XConnect.CertificatePath":        "[joinpath(variable('Security.CertificateStore'), variable('Security.XConnect.CertificateThumbprint'))]",
		"Security.SSL.CertificateThumbprint":       "[GetCertificateThumbprint(parameter('SSLCert'), variable('Security.CertificateStore'))]",

        "Solr.Web.Name":         "[concat(parameter('SolrCorePrefix'), '_web_index')]",
        "Solr.MD.Web.Name":      "[concat(parameter('SolrCorePrefix'), '_marketingdefinitions_web')]",
        "Solr.MA.Web.Name":      "[concat(parameter('SolrCorePrefix'), '_marketing_asset_index_web')]",
        "Solr.FXM.Web.Name":     "[concat(parameter('SolrCorePrefix'), '_fxm_web_index')]",

        "Site.PhysicalPath": "[if(variable('Test.Site.PhysicalPath'),variable('Default.Site.PhysicalPath'),variable('Custom.Site.PhysicalPath'))]",
        "Default.Site.PhysicalPath": "[joinpath(environment('SystemDrive'), 'inetpub', 'wwwroot', parameter('SiteName'))]",
        "Custom.Site.PhysicalPath": "[joinpath(parameter('SitePhysicalRoot'),parameter('SiteName'))]",
        "Test.Site.PhysicalPath": "[equal(parameter('SitePhysicalRoot'),'')]",

        "Site.DataFolder": "[joinpath(variable('Site.PhysicalPath'), 'App_Data')]",

        "Temp.Location" : "[if(variable('Test.Temp.Location'),Environment('Temp'),parameter('PackagesTempLocation'))]",
        "Test.Temp.Location" : "[equal(parameter('PackagesTempLocation'),'')]",

        "Settings.FileName": "sitecore-XP1-cd.json",

        "Dynamic.WDP": "[ReadJson(parameter('DownloadLocations'))]",
        "Test.WDP.Download": "[TestPath(Path:Parameter('DownloadLocations'))]",
        "WDP.Download": "[SelectObject(InputObject:variable('Dynamic.WDP'),ExpandProperty:variable('Settings.Filename'))]",
        "WDP.Download.Uri": "[SelectObject(InputObject:variable('WDP.Download'),ExpandProperty:'Uri')]",
        "WDP.Download.Hash": "[SelectObject(InputObject:variable('WDP.Download'),ExpandProperty:'Hash')]",
        "WDP.Download.Path": "[JoinPath(variable('Temp.Location'),variable('WDP.Filename'))]",
        "WDP.Download.Filename": "[SplitPath(Path:variable('WDP.Download.Uri'),Leaf:true)]",
        "WDP.Filename": "[Split(String:variable('WDP.Download.Filename'),Characters:'?')]",
        "Package": "[if(parameter('Package'),parameter('Package'),variable('WDP.Download.Path'))]",
        "Test.Packaging": "[or(variable('Test.Null.Package'),not(variable('Test.WDP.Download')))]",
        "Test.Null.Package": "[if(parameter('Package'),parameter('Package'),'')]"
    },
    "Tasks": {
        "DownloadWDP": {
            "Description": "Download the WDP and verifies it against the stored hash.",
            "Type": "DownloadFile",
            "Params": {
                "SourceUri": "[variable('WDP.Download.URI')]",
                "DestinationPath": "[variable('WDP.Download.Path')]",
                "Hash": "[variable('WDP.Download.Hash')]"
            },
            "Skip" : "[variable('Test.Packaging')]"
        },
        "CreatePaths": {
            "Description": "Ensure the destination path for the site exists.",
            "Type": "EnsurePath",
            "Params": {
                "Exists": [ "[variable('Site.PhysicalPath')]" ]
            }
        },
        "CreateAppPool": {
            "Description": "Creates or updates the app pool.",
            "Type": "AppPool",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Properties": {
                    "ProcessModel": {
                        "identityType" : "ApplicationPoolIdentity"
                    }
                }
            }
        },
        "CreateWebsite": {
            "Description": "Creates or updates the IIS website instance.",
            "Type": "Website",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "ApplicationPool": "[parameter('SiteName')]",
                "PhysicalPath": "[variable('Site.PhysicalPath')]"
            }
        },
        "StopWebsite": {
            "Description": "Stops the website if it is running.",
            "Type": "ManageWebsite",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Stop"
            }
        },
        "StopAppPool": {
            "Description": "Stops the app pool if it is running.",
            "Type": "ManageAppPool",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Stop"
            }
        },
        "CreateBindings": {
            "Description": "Configures the site bindings for the website.",
            "Type": "WebBinding",
            "Params": {
                "SiteName": "[parameter('SiteName')]",
                "Add": [ { "HostHeader": "[parameter('DnsName')]" } ],
                "Remove": [ { "Port": "80", "IPAddress": "*" } ]
            }
        },
        "CreateHostHeader": {
            "Description": "Sets a hostheader for the website.",
            "Type": "HostHeader",
            "Params": {
                "HostName": "[parameter('HostMappingName')]"
            },
            "Skip": "[not(parameter('HostMappingName'))]"
        },
        "SetPermissions": {
            "Description": "Sets permissions for the app pool user.",
            "Type": "FilePermissions",
            "Params": {
                "Path" : "[variable('Site.PhysicalPath')]",
                "Rights": [
                    {
                        "User": "[concat('IIS AppPool\\', parameter('SiteName'))]",
                        "FileSystemRights": "FullControl",
                        "InheritanceFlags": [ "ContainerInherit", "ObjectInherit"]
                    }
                ]
            }
        },
        "SetCertStorePermissions": {
            "Description": "Set permissions for the services to access the client certificate.",
            "Type": "FilePermissions",
            "Params": {
                "Path" : "[ResolveCertificatePath(variable('Security.XConnect.CertificatePath'))]",
                "Rights": [
                    {
                        "User": "[concat('IIS AppPool\\', parameter('SiteName'))]",
                        "FileSystemRights": ["Read"],
                        "InheritanceFlags": [ "None"]
                    }
                ]
            }
        },
        "InstallWDP": {
            "Type": "WebDeploy",
            "Params" : {
                "Verb": "Sync",
                "Arguments": {
                    "Source": {
                        "Package": "[resolvepath(variable('Package'))]"
                    },
                    "Dest": "Auto",
                    "SetParam": [
                        { "Name": "Application Path", "Value": "[parameter('SiteName')]" },
                        { "Name": "Database Server Name", "Value": "[parameter('SqlServer')]" },
                        { "Name": "Security DB Name", "Value": "[variable('Sql.Database.Security')]" },
                        { "Name": "Web DB Name", "Value": "[variable('Sql.Database.Web')]" },
                        { "Name": "Experience Forms DB Name", "Value": "[variable('Sql.Database.Forms')]" },
                        { "Name": "EXM Master DB Name", "Value": "[variable('Sql.Database.EXM.Master')]" },
                        { "Name": "Messaging DB Name", "Value": "[variable('Sql.Database.Messaging')]" },
                        { "Name": "Web DB User Name", "Value":  "[parameter('SqlWebUser')]"},
                        { "Name": "Web DB User Password", "Value":  "[variable('SqlWeb.Password')]"},
                        { "Name": "Security DB User Name", "Value": "[parameter('SqlSecurityUser')]" },
                        { "Name": "Security DB User Password", "Value": "[variable('SqlSecurity.Password')]" },
                        { "Name": "Experience Forms DB User Name", "Value":  "[parameter('SqlFormsUser')]"},
                        { "Name": "Experience Forms DB User Password", "Value":  "[variable('SqlForms.Password')]"},
                        { "Name": "EXM Master DB User Name", "Value":  "[parameter('SqlExmMasterUser')]"},
                        { "Name": "EXM Master DB User Password", "Value":  "[variable('SqlExmMaster.Password')]"},
                        { "Name": "Messaging DB User Name", "Value":  "[parameter('SqlMessagingUser')]"},
                        { "Name": "Messaging DB User Password", "Value":  "[variable('SqlMessaging.Password')]"},
                        { "Name": "XConnect Collection", "Value": "[parameter('XConnectCollectionService')]" },
                        { "Name": "Xdb Reference Data Client", "Value": "[parameter('XConnectReferenceDataService')]" },
                        { "Name": "XDB MA Reporting Client", "Value": "[parameter('MarketingAutomationReportingService')]" },
                        { "Name": "XDB MA Ops Client", "Value": "[parameter('MarketingAutomationOperationsService')]" },
                        { "Name": "XConnect Server Certificate Validation Thumbprint", "Value": "[variable('Security.XConnect.CertificateThumbprint')]" },
                        { "Name": "SOLR Connection String", "Value": "[parameter('SolrUrl')]" },
                        { "Name": "Solr Web Index Name", "Value": "[variable('Solr.Web.Name')]"},
                        { "Name": "Solr Marketing Definitions Web Index Name", "Value": "[variable('Solr.MD.Web.Name')]"},
                        { "Name": "Solr Marketing Asset Web Index Name", "Value": "[variable('Solr.MA.Web.Name')]"},
                        { "Name": "Solr FXM Web Index Name", "Value": "[variable('Solr.FXM.Web.Name')]"},
                        { "Name": "Sitecore Identity Authority", "Value":  "[parameter('SitecoreIdentityAuthority')]"},
                        { "Name": "EXM Cryptographic Key", "Value": "[variable('EXM.CryptographicKey')]" },
                        { "Name": "EXM Authentication Key", "Value": "[variable('EXM.AuthenticationKey')]" }
                    ]
                }
            }
        },
		"CreateBindingsWithDevelopmentThumbprintDefault": {
            "Description": "Creates a new thumbprint with a custom CA.",
            "Type": "AddWebFeatureSSL",
            "Params": {
                "SiteName": "[parameter('SiteName')]",
                "HostName": "[parameter('DnsName')]",
                "OutputDirectory": "[variable('Site.DataFolder')]"
            },
            "Skip": "[parameter('SSLCert')]"
        },
        "SetLicense" : {
            "Description": "Copies the license file to the instance data folder.",
            "Type": "Copy",
            "Params": {
                "Source": "[resolvepath(parameter('LicenseFile'))]",
                "Destination": "[variable('Site.DataFolder')]"
            }
        },
        "StartAppPool": {
            "Description": "Starts the app pool.",
            "Type": "ManageAppPool",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Start"
            }
        },
        "StartWebsite": {
            "Description": "Starts the website.",
            "Type": "ManageWebsite",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Start"
            }
        }
    },
    "UninstallTasks": {
        "StopWebsite": {
            "Description": "Stops the website if it is running.",
            "Type": "ManageWebsite",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Stop",
                "ErrorAction": "SilentlyContinue"
            }
        },
        "StopAppPool": {
            "Description": "Stops the app pool if it is running.",
            "Type": "ManageAppPool",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Stop",
                "ErrorAction": "SilentlyContinue"
            }
        },
        "RemoveWebsite": {
            "Description": "Removes the IIS website.",
            "Type": "RemoveWebsite",
            "Params": {
                "Name": "[parameter('SiteName')]"
            }
        },
        "RemoveAppPool": {
            "Description": "Removes the IIS application pool.",
            "Type": "RemoveAppPool",
            "Params": {
                "Name": "[parameter('SiteName')]"
            }
        },
        "RemoveContent": {
            "Description": "Removes website content.",
            "Type": "RemoveItem",
            "Params": {
                "Path": "[variable('Site.PhysicalPath')]",
                "Recurse": true,
                "ErrorAction": "SilentlyContinue"
            }
        },
        "RemoveHostHeader": {
            "Description": "Removes the website host name.",
            "Type": "HostHeader",
            "Params": {
                "HostName": "[parameter('SiteName')]",
                "Action": "Remove"
            }
        }
    }
}
